@import "syntax-variables";

atom-text-editor {
  font-weight: 100;
  text-rendering: optimizeLegibility;
}

atom-text-editor, :host {
  background-color: @syntax-background-color;
  color: @syntax-text-color;

  .wrap-guide {
    background-color: @syntax-wrap-guide-color;
  }

  .indent-guide {
    color: @syntax-indent-guide-color;
  }

  .invisible-character {
    color: @syntax-invisible-character-color;
  }

  .gutter {
    background-color: @syntax-gutter-background-color;
    color: @syntax-gutter-text-color;

    .line-number {
      &.cursor-line {
        background-color: @syntax-gutter-background-color-selected;
        color: @syntax-gutter-text-color-selected;
      }

      &.cursor-line-no-selection {
        color: @syntax-gutter-text-color-selected;
      }
    }
  }

  .gutter .line-number.folded,
  .gutter .line-number:after,
  .fold-marker:after {
    color: @light-gray;
  }

  .invisible {
    color: @syntax-text-color;
  }

  .cursor {
    color: @syntax-cursor-color;
  }

  .selection .region {
    background-color: @syntax-selection-color;
  }

  .cursor-line {
    background-color: @cursor-line;
  }
}

atom-text-editor .search-results .marker .region,
:host .search-results .marker .region {
  background-color: transparent;
  border: 1px solid @syntax-result-marker-color;
}

atom-text-editor .search-results .marker.current-result .region,
:host .search-results .marker.current-result .region {
  border: 1px solid @syntax-result-marker-color-selected;
}

.color-index-1 {
  color: @def-local-var;
}

.color-index-2 {
  color: @def-attribute;
}

.color-index-3 {
  color: @def-class-name;
}

.color-index-4 {
  color: @def-constant;
}

.color-index-5 {
  color: @def-function-declaration;
}

.color-index-6 {
  color: @def-global-variable;
}

.color-index-7 {
  color: @def-instance-field;
}

.color-index-8 {
  color: @def-instance-method;
}

.color-index-9 {
  color: @def-param;
}

.color-index-10 {
  color: @static-method;
}

.comment {
  .leading-whitespace {
    color: @syntax-background-color;
    background-color: @syntax-background-color;
  }
  color: @def-comment;
  background-color: @def-comment-bg;
}

.jsx.tag {
  color: @def-jsx-tag;
}

.entity {
  &.name.type {
    color: @def-class-name;
    //text-decoration: underline;
  }

  &.other.inherited-class {
    color: @def-class-name;
  }

  &.name.property {
    color: @def-instance-field;
  }
}

.keyword {
  color: @def-keyword;

  &.function {
    color: @def-function-declaration;
  }

  &.control {
    color: @def-keyword;

    &.module {
      color: @def-keyword;

      + .function {
        .name {
          color: @def-exports;
        }
      }

      + .storage.type {
        & + .variable {
          color: @def-exports;
        }

        & + .meta.function {
          .entity.name.function {
            color: @def-exports;
          }
        }
      }

      + .variable,
      + .builtin,
      + .builtin,
      + .object.node.js,
      + .module.node.js,
      {
        color: @def-interface-name;
      }

      ~ .brace.curly {
        & ~ .variable,
        & ~ .builtin,
        & ~ .builtin,
        & ~ .object.node.js,
        & ~ .module.node.js, {
          color: @def-interface-name;
        }
      }
    }
  }

  &.operator {
    &.assignment, &.accessor, &.arithmetic, &.comparison, &.ternary, &.logical, &.relational {
      color: @def-operator;
    }
  }

  &.other.special-method {
    color: @def-keyword;
  }

  &.other.unit {
    color: @def-keyword;
  }
}

.storage {
  color: @def-keyword;
  &.type {
    &.function.arrow {
      color: @def-function-declaration;
    }
  }
}

.constant {
  color: @def-number;

  .string {
    color: @def-label;
  }

  &.character.escape {
    color: @blue;
  }

  &.numeric {
    color: @def-number;
  }

  &.other.color {
    color: @def-local-var;
  }

  &.other.symbol {
    color: @green;
  }
}

.variable {
  color: @def-global-variable;
  &.class {
      color: @def-class-name;
  }
  &.this {
    color: @def-keyword;
  }
  &.property {
    color: @def-instance-field;
  }
  &.readwrite {
    color: @def-local-var;
  }
  &.interpolation {
    color: darken(@def-local-var, 10%);
  }

  &.parameter.function {
    color: @def-param;
  }

  &.other.object {
    color: @def-local-var;
  }
}

.meta.brace, .punctuation.brace {
  color: @def-braces;
  font-weight: 700;
  span.punctuation.brace {
    font-weight: 700;
  }
}

.meta.brace > span {
 font-weight: normal;
}

.object.key {
    .string.unquoted {
        color: @def-label;
    }
}

.meta.brace.round, .meta.braces.round {
  color: @def-brackets;
  &.function.arguments.group {
      font-weight: bold;
  }
}


.invalid.illegal {
  background-color: @red;
  color: @syntax-background-color;
}

.string {
  color: @def-string;

  &.regexp {
    color: @cyan;

    .source.ruby.embedded {
      color: @orange;
    }
  }

  &.other.link {
    color: @red;
  }
}

.punctuation {
  &.terminator, &.delimiter, &.separator {
    color: @def-operator;
  }
  &.definition {
    &.comment {
      color: @light-gray;
    }

    &.string {
      color: @light-orange;
    }
    &.variable,
    &.parameters,
    &.array {
      color: @def-brackets;
    }

    &.heading,
    &.identity {
      color: @blue;
    }

    &.bold {
      color: @light-orange;
      font-weight: bold;
    }

    &.italic {
      color: @purple;
      font-style: italic;
    }
  }

  &.section.embedded {
    color: darken(@red, 10%);
  }

  &.begin, &.end {
    color: @def-braces;
    font-weight: 700;
  }

}

.support {
  &.class {
    color: @def-class-name;
  }

  &.object, &.module {
    color: saturate(lighten(average(@def-global-variable, @def-instance-field), 10%), 25%);
  }

  &.function  {
    color: @def-function-declaration;

    &.any-method {
      color: @blue;
    }
  }
}

.entity {
  &.name.function, &.name.method {
    color: @def-function-declaration;
  }

  &.name.class, &.name.type.class {
    color: @light-orange;
  }

  &.name.section {
    color: @blue;
  }

  &.name.tag {
    color: @def-function-declaration;
    .class.component {
      color: @light-orange;
    }
    //text-decoration: underline;
  }

  &.other.attribute-name {
    color: @orange;

    &.id {
      color: @blue;
    }
  }
}

// maybe I should work on a language plugin...
.meta.group.braces.round > .meta.group.braces.curly > .meta.function-call.with-arguments:first-child {
    .entity.name.function + .parameters.begin ~ .variable {
        color: @def-param;
    }
}

.meta {
  &.function {
    &.arrow {
      .variable {
          color: @def-param;
      }
    }

    .parameters.begin ~ .variable {
      color: @def-param;
    }
  }

  &.class {
    color: @light-orange;
  }

  &.link {
    color: @orange;
  }

  &.require {
    color: @blue;
  }

  &.selector {
    color: @purple;
  }

  &.separator {
    background-color: @gray;
    color: @syntax-text-color;
  }

  &.delimiter {
    color: @def-operator;
  }

  &.property {
    color: @def-instance-field;

    &.class {
      .variable.static {
        color: @def-function-declaration;
      }
    }
  }

  &.group.braces.curly {
    &.function-call {
      &.function.name {
        color: @def-instance-method;
      }
    }
  }
}

.none {
  color: @syntax-text-color;
}

.markup {
  &.bold {
    color: @orange;
    font-weight: bold;
  }

  &.changed {
    color: @purple;
  }

  &.deleted {
    color: @red;
  }

  &.italic {
    color: @purple;
    font-style: italic;
  }

  &.heading .punctuation.definition.heading {
    color: @blue;
  }

  &.inserted {
    color: @green;
  }

  &.list {
    color: @red;
  }

  &.quote {
    color: @orange;
  }

  &.raw.inline {
    color: @green;
  }
}

.source.gfm .markup {
  -webkit-font-smoothing: auto;
  &.heading {
    color: @green;
  }
}

atom-text-editor[mini] .scroll-view,
:host([mini]) .scroll-view {
  padding-left: 1px;
}

/* java stuff */

/* ruby stuff */
.source.ruby {
  .symbol {
    color: @def-instance-field;
  }
}
